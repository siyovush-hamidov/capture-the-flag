{
	"id": "bf88974286a0e36fa1cb4f5d08790e04",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/level10.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\";\ncontract Reentrance {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balances;\n\n    function donate(address _to) public payable {\n        balances[_to] = balances[_to].add(msg.value);\n    }\n\n    function balanceOf(address _who) public view returns (uint256 balance) {\n        return balances[_who];\n    }\n\n    function withdraw(uint256 _amount) public {\n        if (balances[msg.sender] >= _amount) {\n            (bool result,) = msg.sender.call{value: _amount}(\"\");\n            if (result) {\n                _amount;\n            }\n            balances[msg.sender] -= _amount;\n        }\n    }\n\n    receive() external payable {}\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0xCB PUSH15 0x63ED0C592B58A945EA71862980410E SWAP12 0xAE BALANCE DIFFICULTY BYTE PUSH7 0x75F437262F9C35 CODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "622:4588:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0xCB PUSH15 0x63ED0C592B58A945EA71862980410E SWAP12 0xAE BALANCE DIFFICULTY BYTE PUSH7 0x75F437262F9C35 CODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "622:4588:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
									".code": [
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/level10.sol": {
				"Reentrance": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_who",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balances",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "donate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/level10.sol\":171:825  contract Reentrance {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/level10.sol\":171:825  contract Reentrance {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x362a95\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x27e235e3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/level10.sol\":280:385  function donate(address _to) public payable {... */\n    tag_3:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_11\n      jump\t// in\n    tag_9:\n      stop\n        /* \"src/level10.sol\":230:273  mapping(address => uint256) public balances */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      pop\n      tag_13\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_15\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/level10.sol\":506:788  function withdraw(uint256 _amount) public {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      pop\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      stop\n        /* \"src/level10.sol\":391:500  function balanceOf(address _who) public view returns (uint256 balance) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/level10.sol\":280:385  function donate(address _to) public payable {... */\n    tag_11:\n        /* \"src/level10.sol\":350:378  balances[_to].add(msg.value) */\n      tag_25\n        /* \"src/level10.sol\":368:377  msg.value */\n      callvalue\n        /* \"src/level10.sol\":350:358  balances */\n      0x00\n        /* \"src/level10.sol\":350:363  balances[_to] */\n      dup1\n        /* \"src/level10.sol\":359:362  _to */\n      dup5\n        /* \"src/level10.sol\":350:363  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level10.sol\":350:367  balances[_to].add */\n      tag_26\n      swap1\n        /* \"src/level10.sol\":350:378  balances[_to].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_25:\n        /* \"src/level10.sol\":334:342  balances */\n      0x00\n        /* \"src/level10.sol\":334:347  balances[_to] */\n      dup1\n        /* \"src/level10.sol\":343:346  _to */\n      dup4\n        /* \"src/level10.sol\":334:347  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/level10.sol\":334:378  balances[_to] = balances[_to].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/level10.sol\":280:385  function donate(address _to) public payable {... */\n      pop\n      jump\t// out\n        /* \"src/level10.sol\":230:273  mapping(address => uint256) public balances */\n    tag_15:\n      mstore(0x20, 0x00)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"src/level10.sol\":506:788  function withdraw(uint256 _amount) public {... */\n    tag_19:\n        /* \"src/level10.sol\":586:593  _amount */\n      dup1\n        /* \"src/level10.sol\":562:570  balances */\n      0x00\n        /* \"src/level10.sol\":562:582  balances[msg.sender] */\n      dup1\n        /* \"src/level10.sol\":571:581  msg.sender */\n      caller\n        /* \"src/level10.sol\":562:582  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level10.sol\":562:593  balances[msg.sender] >= _amount */\n      lt\n        /* \"src/level10.sol\":558:782  if (balances[msg.sender] >= _amount) {... */\n      tag_28\n      jumpi\n        /* \"src/level10.sol\":610:621  bool result */\n      0x00\n        /* \"src/level10.sol\":626:636  msg.sender */\n      caller\n        /* \"src/level10.sol\":626:641  msg.sender.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/level10.sol\":649:656  _amount */\n      dup3\n        /* \"src/level10.sol\":626:661  msg.sender.call{value: _amount}(\"\") */\n      mload(0x40)\n      dup1\n      0x00\n      add\n      swap1\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_31\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_30)\n    tag_31:\n      0x60\n      swap2\n      pop\n    tag_30:\n      pop\n        /* \"src/level10.sol\":609:661  (bool result,) = msg.sender.call{value: _amount}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"src/level10.sol\":764:771  _amount */\n      dup2\n        /* \"src/level10.sol\":740:748  balances */\n      0x00\n        /* \"src/level10.sol\":740:760  balances[msg.sender] */\n      dup1\n        /* \"src/level10.sol\":749:759  msg.sender */\n      caller\n        /* \"src/level10.sol\":740:760  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"src/level10.sol\":740:771  balances[msg.sender] -= _amount */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/level10.sol\":558:782  if (balances[msg.sender] >= _amount) {... */\n      pop\n    tag_28:\n        /* \"src/level10.sol\":506:788  function withdraw(uint256 _amount) public {... */\n      pop\n      jump\t// out\n        /* \"src/level10.sol\":391:500  function balanceOf(address _who) public view returns (uint256 balance) {... */\n    tag_23:\n        /* \"src/level10.sol\":445:460  uint256 balance */\n      0x00\n        /* \"src/level10.sol\":479:487  balances */\n      dup1\n        /* \"src/level10.sol\":479:493  balances[_who] */\n      0x00\n        /* \"src/level10.sol\":488:492  _who */\n      dup4\n        /* \"src/level10.sol\":479:493  balances[_who] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level10.sol\":472:493  return balances[_who] */\n      swap1\n      pop\n        /* \"src/level10.sol\":391:500  function balanceOf(address _who) public view returns (uint256 balance) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_26:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":925:932  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:953  uint256 c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":960:961  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:957  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:961  a + b */\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:961  uint256 c = a + b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":984:985  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:980  c */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:985  c >= a */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":971:1017  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_35\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_35:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1035:1036  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1028:1036  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e0073d10a34a25fc515a1cc9be68640b1d2643dbfd39e0c0ec8d488e245b636e64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061044a806100206000396000f3fe6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100925780632e1a7d4d146100f757806370a082311461013257610049565b3661004957005b600080fd5b6100906004803603602081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610197565b005b34801561009e57600080fd5b506100e1600480360360208110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061022d565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b506101306004803603602081101561011a57600080fd5b8101908080359060200190929190505050610245565b005b34801561013e57600080fd5b506101816004803603602081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610344565b6040518082815260200191505060405180910390f35b6101e8346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461038c90919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106103415760003373ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146102ea576040519150601f19603f3d011682016040523d82523d6000602084013e6102ef565b606091505b50509050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220e0073d10a34a25fc515a1cc9be68640b1d2643dbfd39e0c0ec8d488e245b636e64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x362A95 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x132 JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 CALLVALUE PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x38C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x341 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 SMOD RETURNDATASIZE LT LOG3 0x4A 0x25 0xFC MLOAD GAS SHR 0xC9 0xBE PUSH9 0x640B1D2643DBFD39E0 0xC0 0xEC DUP14 0x48 DUP15 0x24 JUMPDEST PUSH4 0x6E64736F PUSH13 0x634300060C0033000000000000 ",
							"sourceMap": "171:654:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100925780632e1a7d4d146100f757806370a082311461013257610049565b3661004957005b600080fd5b6100906004803603602081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610197565b005b34801561009e57600080fd5b506100e1600480360360208110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061022d565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b506101306004803603602081101561011a57600080fd5b8101908080359060200190929190505050610245565b005b34801561013e57600080fd5b506101816004803603602081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610344565b6040518082815260200191505060405180910390f35b6101e8346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461038c90919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106103415760003373ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146102ea576040519150601f19603f3d011682016040523d82523d6000602084013e6102ef565b606091505b50509050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220e0073d10a34a25fc515a1cc9be68640b1d2643dbfd39e0c0ec8d488e245b636e64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x362A95 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x132 JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 CALLVALUE PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x38C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x341 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 SMOD RETURNDATASIZE LT LOG3 0x4A 0x25 0xFC MLOAD GAS SHR 0xC9 0xBE PUSH9 0x640B1D2643DBFD39E0 0xC0 0xEC DUP14 0x48 DUP15 0x24 JUMPDEST PUSH4 0x6E64736F PUSH13 0x634300060C0033000000000000 ",
							"sourceMap": "171:654:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;280:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;230:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;506:282;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;391:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;280:105;350:28;368:9;350:8;:13;359:3;350:13;;;;;;;;;;;;;;;;:17;;:28;;;;:::i;:::-;334:8;:13;343:3;334:13;;;;;;;;;;;;;;;:44;;;;280:105;:::o;230:43::-;;;;;;;;;;;;;;;;;:::o;506:282::-;586:7;562:8;:20;571:10;562:20;;;;;;;;;;;;;;;;:31;558:224;;610:11;626:10;:15;;649:7;626:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;609:52;;;764:7;740:8;:20;749:10;740:20;;;;;;;;;;;;;;;;:31;;;;;;;;;;;558:224;;506:282;:::o;391:109::-;445:15;479:8;:14;488:4;479:14;;;;;;;;;;;;;;;;472:21;;391:109;;;:::o;867:176:0:-;925:7;944:9;960:1;956;:5;944:17;;984:1;979;:6;;971:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;1028:8;;;867:176;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "219600",
								"executionCost": "263",
								"totalCost": "219863"
							},
							"external": {
								"balanceOf(address)": "1240",
								"balances(address)": "1169",
								"donate(address)": "infinite",
								"withdraw(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 171,
									"end": 825,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 825,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e0073d10a34a25fc515a1cc9be68640b1d2643dbfd39e0c0ec8d488e245b636e64736f6c634300060c0033",
									".code": [
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "362A95"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "27E235E3"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "2E1A7D4D"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 825,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 171,
											"end": 825,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 350,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 368,
											"end": 377,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 350,
											"end": 358,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 350,
											"end": 363,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 359,
											"end": 362,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 350,
											"end": 363,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 350,
											"end": 363,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 350,
											"end": 363,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 350,
											"end": 363,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 350,
											"end": 363,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 350,
											"end": 363,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 350,
											"end": 367,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 350,
											"end": 367,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 350,
											"end": 378,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 350,
											"end": 378,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 350,
											"end": 378,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 350,
											"end": 378,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 350,
											"end": 378,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 350,
											"end": 378,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 350,
											"end": 378,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 334,
											"end": 342,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 334,
											"end": 347,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 343,
											"end": 346,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 334,
											"end": 347,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 334,
											"end": 347,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 334,
											"end": 347,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 334,
											"end": 347,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 334,
											"end": 347,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 334,
											"end": 347,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 334,
											"end": 378,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 334,
											"end": 378,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 334,
											"end": 378,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 334,
											"end": 378,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 385,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 230,
											"end": 273,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 586,
											"end": 593,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 562,
											"end": 570,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 582,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 571,
											"end": 581,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 562,
											"end": 582,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 562,
											"end": 582,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 562,
											"end": 582,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 562,
											"end": 582,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 582,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 562,
											"end": 582,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 562,
											"end": 593,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 558,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 558,
											"end": 782,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 610,
											"end": 621,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 636,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 626,
											"end": 641,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 626,
											"end": 641,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 649,
											"end": 656,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "GAS",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "3F"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 626,
											"end": 661,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 626,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 609,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 609,
											"end": 661,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 609,
											"end": 661,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 764,
											"end": 771,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 740,
											"end": 748,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 740,
											"end": 760,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 749,
											"end": 759,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 740,
											"end": 760,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 740,
											"end": 760,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 740,
											"end": 760,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 740,
											"end": 760,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 740,
											"end": 760,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 740,
											"end": 760,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 740,
											"end": 771,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 740,
											"end": 771,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 558,
											"end": 782,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 558,
											"end": 782,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 558,
											"end": 782,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 506,
											"end": 788,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 445,
											"end": 460,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 479,
											"end": 487,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 488,
											"end": 492,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 479,
											"end": 493,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 479,
											"end": 493,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 479,
											"end": 493,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 479,
											"end": 493,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 479,
											"end": 493,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 479,
											"end": 493,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 472,
											"end": 493,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 472,
											"end": 493,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 500,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 925,
											"end": 932,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 944,
											"end": 953,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 960,
											"end": 961,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 956,
											"end": 957,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 956,
											"end": 961,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 944,
											"end": 961,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 944,
											"end": 961,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 984,
											"end": 985,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 979,
											"end": 980,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 979,
											"end": 985,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 979,
											"end": 985,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "1B"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1035,
											"end": 1036,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"balances(address)": "27e235e3",
							"donate(address)": "00362a95",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/level10.sol\":\"Reentrance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]},\"src/level10.sol\":{\"keccak256\":\"0x0e363c2063dc21bad80344ab701ab05ab1a0a7676a318ec5556c8fee4514df51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5e7d487be846def7666df283881b0688cd09ceb0b0ab5e6f96c8dbc3b1e7db2\",\"dweb:/ipfs/QmZ1DHfUFdydjo2FqhJJa6n2qxtfaGdAZ8RngFapS5wsv3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 205,
								"contract": "src/level10.sol:Reentrance",
								"label": "balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							195
						]
					},
					"id": 196,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:0",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 195,
							"linearizedBaseContracts": [
								195
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 27,
										"nodeType": "Block",
										"src": "934:109:0",
										"statements": [
											{
												"assignments": [
													13
												],
												"declarations": [
													{
														"constant": false,
														"id": 13,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 27,
														"src": "944:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 12,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "944:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 17,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 14,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "956:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 15,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "960:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "956:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "944:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 19,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 13,
																"src": "979:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 20,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "984:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "979:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "987:29:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 18,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "971:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "971:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "971:46:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 25,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 13,
													"src": "1035:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 11,
												"id": 26,
												"nodeType": "Return",
												"src": "1028:8:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "645:217:0",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 28,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 28,
												"src": "880:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "880:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 28,
												"src": "891:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "879:22:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 28,
												"src": "925:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "924:9:0"
									},
									"scope": 195,
									"src": "867:176:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1374:67:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 39,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "1395:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 40,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 33,
															"src": "1398:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1401:32:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 38,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															45,
															73
														],
														"referencedDeclaration": 73,
														"src": "1391:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 37,
												"id": 43,
												"nodeType": "Return",
												"src": "1384:50:0"
											}
										]
									},
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "1049:253:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 45,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 45,
												"src": "1320:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 30,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 45,
												"src": "1331:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1331:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1319:22:0"
									},
									"returnParameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 45,
												"src": "1365:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1365:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1364:9:0"
									},
									"scope": 195,
									"src": "1307:134:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 72,
										"nodeType": "Block",
										"src": "1820:92:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 60,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 58,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 50,
																"src": "1838:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 59,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 48,
																"src": "1843:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1838:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 61,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 52,
															"src": "1846:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 57,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1830:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 62,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1830:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 63,
												"nodeType": "ExpressionStatement",
												"src": "1830:29:0"
											},
											{
												"assignments": [
													65
												],
												"declarations": [
													{
														"constant": false,
														"id": 65,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 72,
														"src": "1869:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 64,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1869:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 69,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 66,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "1881:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 67,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "1885:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1881:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1869:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 70,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 65,
													"src": "1904:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 56,
												"id": 71,
												"nodeType": "Return",
												"src": "1897:8:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1447:273:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 73,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 73,
												"src": "1738:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 47,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1738:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 73,
												"src": "1749:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 73,
												"src": "1760:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 51,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1760:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1737:50:0"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 73,
												"src": "1811:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1811:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1810:9:0"
									},
									"scope": 195,
									"src": "1725:187:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "2219:392:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 83,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 76,
														"src": "2451:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 84,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2456:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2451:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 89,
												"nodeType": "IfStatement",
												"src": "2447:45:0",
												"trueBody": {
													"id": 88,
													"nodeType": "Block",
													"src": "2459:33:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 86,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2480:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 82,
															"id": 87,
															"nodeType": "Return",
															"src": "2473:8:0"
														}
													]
												}
											},
											{
												"assignments": [
													91
												],
												"declarations": [
													{
														"constant": false,
														"id": 91,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 107,
														"src": "2502:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 90,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2502:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 95,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 92,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 76,
														"src": "2514:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 93,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 78,
														"src": "2518:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2514:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2502:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 99,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 97,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 91,
																	"src": "2537:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 98,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 76,
																	"src": "2541:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2537:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 100,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 78,
																"src": "2546:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2537:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2549:35:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 96,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2529:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2529:56:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 105,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 91,
													"src": "2603:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 82,
												"id": 106,
												"nodeType": "Return",
												"src": "2596:8:0"
											}
										]
									},
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "1918:229:0",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 108,
												"src": "2165:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 108,
												"src": "2176:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 77,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2164:22:0"
									},
									"returnParameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 108,
												"src": "2210:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 80,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2209:9:0"
									},
									"scope": 195,
									"src": "2152:459:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "3133:63:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 119,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 111,
															"src": "3154:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 120,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 113,
															"src": "3157:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3160:28:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 118,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															125,
															153
														],
														"referencedDeclaration": 153,
														"src": "3150:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3150:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 117,
												"id": 123,
												"nodeType": "Return",
												"src": "3143:46:0"
											}
										]
									},
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "2617:444:0",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 125,
												"src": "3079:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3079:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 125,
												"src": "3090:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 112,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3090:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3078:22:0"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 125,
												"src": "3124:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3124:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3123:9:0"
									},
									"scope": 195,
									"src": "3066:130:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "3766:243:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 138,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 130,
																"src": "3850:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 139,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3854:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3850:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 141,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 132,
															"src": "3857:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 137,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3842:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3842:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "3842:28:0"
											},
											{
												"assignments": [
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 152,
														"src": "3880:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 144,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3880:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 149,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 146,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "3892:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 147,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 130,
														"src": "3896:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3892:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3880:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 150,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "4001:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 136,
												"id": 151,
												"nodeType": "Return",
												"src": "3994:8:0"
											}
										]
									},
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "3202:464:0",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 153,
												"src": "3684:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3684:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 153,
												"src": "3695:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3695:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 153,
												"src": "3706:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 131,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3706:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3683:50:0"
									},
									"returnParameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 153,
												"src": "3757:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3756:9:0"
									},
									"scope": 195,
									"src": "3671:338:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "4520:61:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 164,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "4541:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 165,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "4544:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4547:26:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 163,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															170,
															194
														],
														"referencedDeclaration": 194,
														"src": "4537:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4537:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 162,
												"id": 168,
												"nodeType": "Return",
												"src": "4530:44:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "4015:433:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 170,
												"src": "4466:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 170,
												"src": "4477:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4477:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4465:22:0"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 170,
												"src": "4511:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4511:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4510:9:0"
									},
									"scope": 195,
									"src": "4453:128:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 193,
										"nodeType": "Block",
										"src": "5140:68:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 183,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 175,
																"src": "5158:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 184,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5163:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5158:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 186,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "5166:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 182,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5150:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5150:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "5150:29:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 189,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 173,
														"src": "5196:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 190,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 175,
														"src": "5200:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5196:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 181,
												"id": 192,
												"nodeType": "Return",
												"src": "5189:12:0"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "4587:453:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "5058:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5058:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "5069:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5069:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "5080:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 176,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5080:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5057:50:0"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "5131:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5131:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5130:9:0"
									},
									"scope": 195,
									"src": "5045:163:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 196,
							"src": "622:4588:0"
						}
					],
					"src": "33:5178:0"
				},
				"id": 0
			},
			"src/level10.sol": {
				"ast": {
					"absolutePath": "src/level10.sol",
					"exportedSymbols": {
						"Reentrance": [
							276
						]
					},
					"id": 277,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 197,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"id": 198,
							"nodeType": "ImportDirective",
							"scope": 277,
							"sourceUnit": 196,
							"src": "58:112:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 276,
							"linearizedBaseContracts": [
								276
							],
							"name": "Reentrance",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 201,
									"libraryName": {
										"contractScope": null,
										"id": 199,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 195,
										"src": "203:8:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$195",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "197:27:1",
									"typeName": {
										"id": 200,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "216:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "27e235e3",
									"id": 205,
									"mutability": "mutable",
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 276,
									"src": "230:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 204,
										"keyType": {
											"id": 202,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "238:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "230:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 203,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "249:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 222,
										"nodeType": "Block",
										"src": "324:61:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 210,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "334:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 212,
														"indexExpression": {
															"argumentTypes": null,
															"id": 211,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "343:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "334:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 217,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "368:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 218,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "368:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 213,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "350:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 215,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 214,
																	"name": "_to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 207,
																	"src": "359:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "350:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 28,
															"src": "350:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 219,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "350:28:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "334:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 221,
												"nodeType": "ExpressionStatement",
												"src": "334:44:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "00362a95",
									"id": 223,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "donate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 223,
												"src": "296:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "296:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "295:13:1"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "324:0:1"
									},
									"scope": 276,
									"src": "280:105:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "462:38:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 230,
														"name": "balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 205,
														"src": "479:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 232,
													"indexExpression": {
														"argumentTypes": null,
														"id": 231,
														"name": "_who",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "488:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "479:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 229,
												"id": 233,
												"nodeType": "Return",
												"src": "472:21:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "70a08231",
									"id": 235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "_who",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 235,
												"src": "410:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "409:14:1"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 235,
												"src": "445:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "444:17:1"
									},
									"scope": 276,
									"src": "391:109:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 270,
										"nodeType": "Block",
										"src": "548:240:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 240,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "562:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 243,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 241,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "571:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "571:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "562:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 244,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 237,
														"src": "586:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "562:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 269,
												"nodeType": "IfStatement",
												"src": "558:224:1",
												"trueBody": {
													"id": 268,
													"nodeType": "Block",
													"src": "595:187:1",
													"statements": [
														{
															"assignments": [
																247,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 247,
																	"mutability": "mutable",
																	"name": "result",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 268,
																	"src": "610:11:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 246,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "610:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																},
																null
															],
															"id": 255,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "",
																		"id": 253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "658:2:1",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 248,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -15,
																				"src": "626:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 249,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "626:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "626:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"argumentTypes": null,
																			"id": 251,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 237,
																			"src": "649:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "626:31:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "626:35:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "609:52:1"
														},
														{
															"condition": {
																"argumentTypes": null,
																"id": 256,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 247,
																"src": "679:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": null,
															"id": 260,
															"nodeType": "IfStatement",
															"src": "675:52:1",
															"trueBody": {
																"id": 259,
																"nodeType": "Block",
																"src": "687:40:1",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 257,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 237,
																			"src": "705:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 258,
																		"nodeType": "ExpressionStatement",
																		"src": "705:7:1"
																	}
																]
															}
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 266,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 261,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 205,
																		"src": "740:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 264,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 262,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "749:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 263,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "749:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "740:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"id": 265,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "764:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "740:31:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 267,
															"nodeType": "ExpressionStatement",
															"src": "740:31:1"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "2e1a7d4d",
									"id": 271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 271,
												"src": "524:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "524:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "523:17:1"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "548:0:1"
									},
									"scope": 276,
									"src": "506:282:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 274,
										"nodeType": "Block",
										"src": "821:2:1",
										"statements": []
									},
									"documentation": null,
									"id": 275,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "801:2:1"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "821:0:1"
									},
									"scope": 276,
									"src": "794:29:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 277,
							"src": "171:654:1"
						}
					],
					"src": "32:793:1"
				},
				"id": 1
			}
		}
	}
}